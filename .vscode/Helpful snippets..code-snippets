{
	// Place your byzantine-opal workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create new code objects": {
		"prefix": "@create",
		"body": "@create $1 Functions <$2F>=10\r\n@set $2F=SAFE INHERIT\r\n@force me=&d.$2f me=[num($2F)]\r\n\r\n@create $1 Commands <$2C>=10\r\n@set $2C=SAFE INHERIT OPAQUE\r\n@parent $2C=$2F\r\n@force me=&d.$2c me=[num($2C)]\r\n\r\n@tel [v(d.$2f)]=[v(d.$2c)]\r\n",
		"description": "creating new code objects"
	},
	"Insert standard command": {
		"prefix": "&c.+",
		"body": "&c.+${1:command_name} [v(d.$2)]=$+${1:command_name}$3:${0:@trigger me/tr.error=%#, Not implemented yet.;}\r\n",
		"description": "inserting a standard command body"
	},
	"Insert assert with error": {
		"prefix": "@assert",
		"body": "@assert $1={ @trigger me/tr.error=%${2:#}, $0; };",
		"description": "assert with an error message"
	},
	"Insert assert staff error": {
		"prefix": "@assert isstaff(",
		"body": "@assert isstaff(%${1:#})={ @trigger me/tr.error=%$1, Only staff can $0.; };",
		"description": "assert staff error"
	},
	"Insert find player error": {
		"prefix": "@assert t(setr(P,",
		"body": "@assert t(setr(P, ulocal(f.find-player, %${1:0}, %${2:#})))={ @trigger me/tr.error=%$2, Could not find a player named '%$1'.; }; $0",
		"description": "assert find player"
	},
	"Insert is approved error": {
		"prefix": "@assert isapproved(%",
		"body": "@assert isapproved(${1:%#})={ @trigger me/tr.error=$1, You must be approved to $2.; };",
		"description": "assert is approved"
	},
	"Insert find crew error": {
		"prefix": "@assert t(setr(C, ulocal(f.get-player-stat, crew object))=",
		"body": "@eval setq(N, ulocal(f.get-name, %qP, ${1:%#})); @assert t(setr(C, ulocal(f.get-player-stat, %qP, crew object)))={ @trigger me/tr.error=$1, %qN is not a member of a crew.; };",
		"description": "assert is member of a crew"
	},
	"Insert assert timer error": {
		"prefix": "@assert gettimer(",
		"body": "@assert gettimer(${1:%#}, ${2:timer-attribute}$3)={ @trigger me/tr.message=$1, You are about to $4. This will ${5:have consequences}. Are you sure? If yes%, type %ch+${6:command}${3/,//gi}%cn again within the next 10 minutes. The time is now [prettytime()].; @eval settimer($1, $2, 600$3); };",
		"description": "assert timer error"
	},
	"Insert eval name": {
		"prefix": "@eval setq(N, ulocal(f.get-name, %qP, %;",
		"body": "@eval setq(N, ulocal(f.get-name, %qP, ${1:%#}));",
		"description": "eval name variable"
	},
	"Insert eval crew name": {
		"prefix": "@eval setq(W, ulocal(f.get-crew-name, %qC);",
		"body": "@eval setq(W, ulocal(f.get-crew-name, %qC);",
		"description": "eval name variable"
	},
	"Insert error trigger": {
		"prefix": "@trigger me/tr.error=%",
		"body": "@trigger me/tr.error=${1:%#}, $0;",
		"description": "trigger error message"
	},
	"Insert success trigger": {
		"prefix": "@trigger me/tr.success=%",
		"body": "@trigger me/tr.success=${1:%#}, $0;",
		"description": "trigger success message"
	},
	"Insert alert trigger": {
		"prefix": "@trigger me/tr.message=%",
		"body": "@trigger me/tr.message=${1:%#}, $0;",
		"description": "trigger alert message"
	},
	"Insert log trigger": {
		"prefix": "@trigger me/tr.log=%",
		"body": "@trigger me/tr.log=${1:%#}, $2, $3, $4;",
		"description": "trigger logging on the player"
	},
	"Insert break with error": {
		"prefix": "@break t(",
		"body": "@break t($1)={ @trigger me/tr.error=${2:%#}, $3; };",
		"description": "break with an error message"
	},
	"Insert break without error": {
		"prefix": "@break strmatch(",
		"body": "@break strmatch($1, $2);",
		"description": "break without an error message"
	},
	"Insert standard error/alert/success triggers": {
		"prefix": "&tr.error [v(d.",
		"body": "&tr.error [v(d.$1)]=@pemit %0=cat(alert(Error), %1);\r\n\r\n&tr.message [v(d.$1)]=@pemit %0=cat(alert(Alert), %1);\r\n\r\n&tr.success [v(d.$1)]=@pemit %0=cat(alert(Success), %1);\r\n\r\n",
		"description": "assert with an error message"
	},
	"Insert standard function": {
		"prefix": "&f.",
		"body": "&f.$1 [v(d.$2)]=${3|cand,cat,cor,if,strcat|}($0)\r\n"
	},
	"Insert layout function": {
		"prefix": "&layout.",
		"body": "&layout.$1 [v(d.$2)]=${3|cat,strcat|}($0)\r\n"
	},
	"Insert standard data object": {
		"prefix": "&d.",
		"body": "&d.$1 [v(d.$2)]=$3"
	},
	"Insert other attribute": {
		"prefix": "&",
		"body": "&$1 [v(d.$2f)]=$3\r\n"
	},
	"Test function": {
		"prefix": "th ulocal(v(d.",
		"body": "th ulocal(v(d.$1)/$0)"
	},
	"Insert if statement": {
		"prefix": "@if",
		"body": "@if $1={ $2 }${3:, { $4 \\}}"
	},
	"Code region comment": {
		"prefix": "@@ ~~~~~~~~~~",
		"body": "@@ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ @@\n@@ $0\n@@ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ @@"
	},
	"Code function comment:": {
		"prefix": "@@ %:",
		"body": "@@ %${1:0}: $0"
	},
	"Line break comment": {
		"prefix": "@@ ============",
		"body": "@@ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ @@\n"
	}
}